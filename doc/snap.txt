*snap.txt* manage vim abbreviations

              ______                              ~
             /      \                             ~
            |  ▓▓▓▓▓▓\_______   ______   ______   ~
            | ▓▓___\▓▓       \ |      \ /      \  ~
             \▓▓    \| ▓▓▓▓▓▓▓\ \▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ~
             _\▓▓▓▓▓▓\ ▓▓  | ▓▓/      ▓▓ ▓▓  | ▓▓ ~
            |  \__| ▓▓ ▓▓  | ▓▓  ▓▓▓▓▓▓▓ ▓▓__/ ▓▓ ~
             \▓▓    ▓▓ ▓▓  | ▓▓\▓▓    ▓▓ ▓▓    ▓▓ ~
              \▓▓▓▓▓▓ \▓▓   \▓▓ \▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓  ~
                                       | ▓▓       ~
                                       | ▓▓       ~
                                        \▓▓       ~

        Vim plugin to organize and manage your abbreviations!

===============================================================================
CONTENTS                                                         *SnapContents*

    1. Introduction ...................... |SnapIntroduction|
    2. Usage ............................. |SnapUsage|
        2.1 Snap Files ................... |SnapFiles|
        2.2 Syntax ....................... |SnapSyntax|
        2.3 snipexpr ..................... |SnapSnipExpr|
        2.4 Prefix ....................... |SnapPrefix|
    3. Troubleshooting ................... |SnapTrouble|
    4. Contributing ...................... |SnapContributing|
    5. Bugs .............................. |SnapBugs|
    6. License ........................... |SnapLicense|

===============================================================================
1. Introduction                                              *SnapIntroduction*

Snap is a plugin for organizing and managing vim abbreviations (see
`:h abbreviations`). It can be particularly useful for those who use vim's
abbreviations as snippets.

===============================================================================
2. Usage                                                            *SnapUsage*
                                                                   *g:snap_dir*

You first need a directory to store your snap files, files which will contain
filetype-specific abbreviations (called 'snips'). The default location is
the `snap/` directory, placed in the same directory as `$MYVIMRC`. To change
this, you can set the `g:snap_dir` variable in your vimrc.

-------------------------------------------------------------------------------
2.1 Snap Files                                                      *SnapFiles*

In your snap directory, you can create `<filetype>.snap` files. All snips in
this file will be loaded and available when a buffer of that filetype is
opened. The special file `_default.snap` can be used for snips that will
always be loaded and available everywhere.

-------------------------------------------------------------------------------
2.2 Syntax                                                         *SnapSyntax*

Below is an example of the syntax for snips in a snap file: >

    # comment #
    snip psvm {
    public static void main()<Left>
    }

The keyword 'snip' is used to define an abbreviation, followed by its name,
and then the expansion for the snip enclosed within curly braces. Note the use
of `<Left>` - these snips are just to translated to a vim `inoreabbrev`
command, so everything you're allowed to do within the `inoreabbrev` command,
you're allowed here as well. See `:h abbreviations` for more.

Basic syntax highlighting for snap files is also provided.

-------------------------------------------------------------------------------
2.3 snipexpr                                                     *SnapSnipExpr*

You can also use the 'snipexpr' keyword instead of 'snip' to create
abbreviations where the expansion is a vimscript expression. This expression
will be evaluated and its result will be used as the expansion: >

    # shows the current time, in HH:MM format #
    snipexpr time {
    strftime('%H:%M')
    }

-------------------------------------------------------------------------------
2.4 Prefix                                                         *SnapPrefix*
                                                                *g:snap_prefix*

To make snips more manageable, all snips are actually prefixed. The default is
'0', so the snip in the example above will be expanded when you type '0time'
and then a space (or a keyword character). You can specify your own prefix by
setting the `g:snap_prefix` variable. Note that the prefix must be a
keyword character otherwise the abbreviation may not function properly (see
`:h iskeyword`).

===============================================================================
3. Troubleshooting                                                *SnapTrouble*

- When your snap file gets larger (around 17-20 snips), you may get a
  `maxfuncdepth` error from vim. This is because vim limits recursive function
  calls to 100 by default, which may be exceeded by the parser for snap files.
  In this case, you can simply increase the value of maxfuncdepth in your
  vimrc (see `:h maxfuncdepth`).

- Some snips may not register properly if they contain non-keyword characters,
  due to how vim handles abbreviation names. See `:h iskeyword` and
  `:h abbreviations` for more.

- If a snip is not working properly, try running `:abbr` to see which
  abbreviations are available for the current buffer to check if they were
  added properly or not.

- Syntax highlighting is quite basic, and may break sometimes. You can turn it
  off manually by running `:setlocal syntax=off` in that buffer. Feel free to
  open an issue about it and help improve the syntax highlighting for snap.

===============================================================================
4. Contributing                                              *SnapContributing*

There are several ways you can contribute:
- You can, of course, help by directly making improvements to the code. The
  parser for snap files in particular could be much better.
- You can also help with improving the documentation if you find errors or
  find it confusing.
- You can help improve the syntax highlighting if you find issues with it.
- You can share your snap files at https://github.com/quintik/snapfiles to
  help others discover them easily!

===============================================================================
5. Bugs                                                              *SnapBugs*

Issue tracker: https://github.com/quintik/snap.vim/issues

===============================================================================
6. License                                                        *SnapLicense*

MIT License: https://github.com/quintik/snap.vim/blob/master/LICENSE

